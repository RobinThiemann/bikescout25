import { __awaiter, __extends, __generator } from "tslib";
import { ModalsPluginWeb, WebPlugin } from "@capacitor/core";
var webModals = new ModalsPluginWeb();
var _a = require('electron').remote, dialog = _a.dialog, getCurrentWindow = _a.getCurrentWindow;
var ModalsPluginElectron = /** @class */ (function (_super) {
    __extends(ModalsPluginElectron, _super);
    function ModalsPluginElectron() {
        return _super.call(this, {
            name: 'Modals',
            platforms: ['electron']
        }) || this;
    }
    ModalsPluginElectron.prototype.alert = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var buttons;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buttons = [options.buttonTitle || 'OK'];
                        return [4 /*yield*/, dialog.showMessageBox(getCurrentWindow(), { message: options.message, title: options.title, buttons: buttons })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    ModalsPluginElectron.prototype.prompt = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var val;
            return __generator(this, function (_a) {
                val = window.prompt(options.message, options.inputText || '');
                return [2 /*return*/, Promise.resolve({
                        value: val,
                        cancelled: val === null
                    })];
            });
        });
    };
    ModalsPluginElectron.prototype.confirm = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var buttons, value;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        buttons = [options.okButtonTitle || 'OK', options.cancelButtonTitle || 'Cancel'];
                        return [4 /*yield*/, dialog.showMessageBox(getCurrentWindow(), { message: options.message, title: options.title, buttons: buttons })];
                    case 1:
                        value = _a.sent();
                        return [2 /*return*/, { value: value.response === 0 }];
                }
            });
        });
    };
    ModalsPluginElectron.prototype.showActions = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, webModals.showActions(options)];
            });
        });
    };
    return ModalsPluginElectron;
}(WebPlugin));
export { ModalsPluginElectron };
var Modals = new ModalsPluginElectron();
export { Modals };
//# sourceMappingURL=modals.js.map